struct SplitVec {
	vector<int> vec1, vec2;
};

vector<int> Merge(SplitVec& vec)
{
	vector<int> vec3;
	int j = 0;
	int i = 0;
	while (i < (vec.vec1.size()) || j < (vec.vec2.size()))
	{	
		if ((vec.vec1.size()) > i && vec.vec2.size() > j)
		{
			if (vec.vec1[i] > vec.vec2[j])
			{
				vec3.push_back(vec.vec2[j]);
				j++;
			}
			else if (vec.vec1[i] < vec.vec2[j])
			{
				vec3.push_back(vec.vec1[i]);
				i++;
			}
			else
			{
				vec3.push_back(vec.vec1[i]);
				vec3.push_back(vec.vec2[j]);
				i++;
				j++;
			}
		}
		else if (i < j)
		{
			vec3.push_back(vec.vec1[i]);
			i++;
		}
		else if (j < i)
		{
			vec3.push_back(vec.vec2[j]);
			j++;
		}
		
	}
	return vec3;
}

vector<int> MergeSort(vector<int>& vec1)
{
	SplitVec vec;

	if (vec1.size() > 4)
	{
		int j = vec1.size() / 2;
		for (int i = 0; i < vec1.size() / 2; i++)
		{
			vec.vec1.push_back(vec1[i]);
			vec.vec2.push_back(vec1[j]);
			j++;
		}
		MergeSort(vec.vec1);
		MergeSort(vec.vec2);
	}
	else if (vec1.size() == 4)
	{
		int j = vec1.size() / 2;
		for (int i = 0; i < vec1.size() / 2; i++)
		{
			vec.vec1.push_back(vec1[i]);
			vec.vec2.push_back(vec1[j]);
			j++;
		}
	}
	return vec1 = Merge(vec);
}